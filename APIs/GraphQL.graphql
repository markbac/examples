# Schema definition
schema {
  query: Query
  mutation: Mutation
}

# Root query type for fetching data
type Query {
  # Get details of a specific book by its ID
  getBook(bookId: ID!): Book

  # List all books with optional filtering and pagination
  listBooks(page: Int = 1, limit: Int = 10, filter: BookFilter): PaginatedBooks

  # Get details of a user by their ID
  getUser(userId: ID!): User
}

# Root mutation type for creating or modifying data
type Mutation {
  # Add a new book to the library
  addBook(input: AddBookInput!): Book

  # Update an existing book in the library
  updateBook(bookId: ID!, input: UpdateBookInput!): Book

  # Delete a book from the library
  deleteBook(bookId: ID!): Book

  # Checkout a book by a user
  checkoutBook(userId: ID!, bookId: ID!, dueDate: String!): BookCheckout

  # Return a book by a user
  returnBook(userId: ID!, bookId: ID!): BookReturn
}

# Book type representing a book in the library
type Book {
  bookId: ID!
  title: String!
  author: String!
  genre: String
  availableCopies: Int
  publishedDate: String
}

# Input type for adding a book
input AddBookInput {
  title: String!
  author: String!
  genre: String
  availableCopies: Int
  publishedDate: String
}

# Input type for updating a book
input UpdateBookInput {
  title: String
  author: String
  genre: String
  availableCopies: Int
  publishedDate: String
}

# Paginated response for listing books
type PaginatedBooks {
  books: [Book!]!
  pagination: Pagination
}

# Pagination information
type Pagination {
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
}

# Book filtering input
input BookFilter {
  genre: String
  author: String
}

# User type representing a library user
type User {
  userId: ID!
  name: String!
  email: String!
  role: Role!
}

# Enum for user roles
enum Role {
  USER
  ADMIN
}

# Type representing a book checkout by a user
type BookCheckout {
  bookId: ID!
  userId: ID!
  dueDate: String!
}

# Type representing a book return by a user
type BookReturn {
  bookId: ID!
  userId: ID!
  returnDate: String!
}
